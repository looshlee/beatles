// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package daemon

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteClusterNodesNeighHandlerFunc turns a function with the right signature into a delete cluster nodes neigh handler
type DeleteClusterNodesNeighHandlerFunc func(DeleteClusterNodesNeighParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteClusterNodesNeighHandlerFunc) Handle(params DeleteClusterNodesNeighParams) middleware.Responder {
	return fn(params)
}

// DeleteClusterNodesNeighHandler interface for that can handle valid delete cluster nodes neigh params
type DeleteClusterNodesNeighHandler interface {
	Handle(DeleteClusterNodesNeighParams) middleware.Responder
}

// NewDeleteClusterNodesNeigh creates a new http.Handler for the delete cluster nodes neigh operation
func NewDeleteClusterNodesNeigh(ctx *middleware.Context, handler DeleteClusterNodesNeighHandler) *DeleteClusterNodesNeigh {
	return &DeleteClusterNodesNeigh{Context: ctx, Handler: handler}
}

/*DeleteClusterNodesNeigh swagger:route DELETE /cluster/nodes/neigh daemon deleteClusterNodesNeigh

Remove node as a neighbor from cluster

Removes a node as a neighbor from the cluster. This operation removes
the permanent entry from the current node's neighbor table.


*/
type DeleteClusterNodesNeigh struct {
	Context *middleware.Context
	Handler DeleteClusterNodesNeighHandler
}

func (o *DeleteClusterNodesNeigh) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteClusterNodesNeighParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
