// +build !ignore_autogenerated

// Copyright 2017-2020 Authors of Cilium
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by main. DO NOT EDIT.

package types

// deepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *CiliumEndpoint) deepEqual(other *CiliumEndpoint) bool {
	if other == nil {
		return false
	}

	if (in.Identity == nil) != (other.Identity == nil) {
		return false
	} else if in.Identity != nil {
		if !in.Identity.DeepEqual(other.Identity) {
			return false
		}
	}

	if (in.Networking == nil) != (other.Networking == nil) {
		return false
	} else if in.Networking != nil {
		if !in.Networking.DeepEqual(other.Networking) {
			return false
		}
	}

	if (in.Encryption == nil) != (other.Encryption == nil) {
		return false
	} else if in.Encryption != nil {
		if !in.Encryption.DeepEqual(other.Encryption) {
			return false
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *ContainerPort) DeepEqual(other *ContainerPort) bool {
	if other == nil {
		return false
	}

	if in.Protocol != other.Protocol {
		return false
	}
	if in.ContainerPort != other.ContainerPort {
		return false
	}
	if in.HostPort != other.HostPort {
		return false
	}
	if in.HostIP != other.HostIP {
		return false
	}

	return true
}

// deepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *Pod) deepEqual(other *Pod) bool {
	if other == nil {
		return false
	}

	if in.StatusPodIP != other.StatusPodIP {
		return false
	}
	if in.StatusHostIP != other.StatusHostIP {
		return false
	}
	if in.SpecServiceAccountName != other.SpecServiceAccountName {
		return false
	}
	if in.SpecHostNetwork != other.SpecHostNetwork {
		return false
	}
	if ((in.SpecContainers != nil) && (other.SpecContainers != nil)) || ((in.SpecContainers == nil) != (other.SpecContainers == nil)) {
		in, other := &in.SpecContainers, &other.SpecContainers
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for i, inElement := range *in {
				if !inElement.DeepEqual(&(*other)[i]) {
					return false
				}
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *PodContainer) DeepEqual(other *PodContainer) bool {
	if other == nil {
		return false
	}

	if in.Name != other.Name {
		return false
	}
	if in.Image != other.Image {
		return false
	}
	if ((in.VolumeMountsPaths != nil) && (other.VolumeMountsPaths != nil)) || ((in.VolumeMountsPaths == nil) != (other.VolumeMountsPaths == nil)) {
		in, other := &in.VolumeMountsPaths, &other.VolumeMountsPaths
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for i, inElement := range *in {
				if inElement != (*other)[i] {
					return false
				}
			}
		}
	}

	if ((in.HostPorts != nil) && (other.HostPorts != nil)) || ((in.HostPorts == nil) != (other.HostPorts == nil)) {
		in, other := &in.HostPorts, &other.HostPorts
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for i, inElement := range *in {
				if !inElement.DeepEqual(&(*other)[i]) {
					return false
				}
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *SlimCNP) DeepEqual(other *SlimCNP) bool {
	if other == nil {
		return false
	}

	if (in.CiliumNetworkPolicy == nil) != (other.CiliumNetworkPolicy == nil) {
		return false
	} else if in.CiliumNetworkPolicy != nil {
		if !in.CiliumNetworkPolicy.DeepEqual(other.CiliumNetworkPolicy) {
			return false
		}
	}

	return true
}
